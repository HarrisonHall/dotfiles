.TH "RAD\-PATCH" "1" "2024-11-28" "rad 1.0.0" "Radicle CLI Manual"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
rad-patch \- Manage radicle patches.
.SH "SYNOPSIS"
.sp
\fBrad patch\fP [<option>...]
.br
\fBrad patch\fP \fIlist\fP [\-\-all|\-\-merged|\-\-open|\-\-archived|\-\-draft] [<option>...]
.br
\fBrad patch\fP \fIshow\fP <patch\-id> [<option>...]
.br
\fBrad patch\fP \fIdiff\fP <patch\-id> [\-\-revision <revision\-id>] [<option>...]
.br
\fBrad patch\fP \fIarchive\fP <patch\-id> [\-\-undo] [<option>...]
.br
\fBrad patch\fP \fIupdate\fP <patch\-id> [<option>...]
.br
\fBrad patch\fP \fIcheckout\fP <patch\-id> [<option>...]
.br
\fBrad patch\fP \fIdelete\fP <patch\-id> [<option>...]
.br
\fBrad patch\fP \fIredact\fP <revision\-id> [<option>...]
.br
\fBrad patch\fP \fIready\fP <patch\-id> [\-\-undo] [<option>...]
.br
\fBrad patch\fP \fIreview\fP <patch\-id> [<option>...]
.br
\fBrad patch\fP \fIedit\fP <patch\-id> [<option>...]
.br
\fBrad patch\fP \fIset\fP <patch\-id> [<option>...]
.br
\fBrad patch\fP \fIcomment\fP <revision\-id> [<option>...]
.br
\fBrad patch\fP \fIlabel\fP <patch\-id> [<option>...]
.br
.sp
\fBgit push rad\fP HEAD:refs/patches
.br
.SH "DESCRIPTION"
.sp
The Radicle \fBpatch\fP command is used for managing changesets inside of Radicle
repositories.
.sp
Though many actions can be performed using \fBrad patch\fP, certain patch\-related
actions use \fBgit\fP directly. For example, opening a patch is typically
done using \fBgit push\fP, while merging a patch is done with a combination of
\fBgit merge\fP and \fBgit push\fP.
.sp
To make this possible, Radicle ships with a helper program, \fBgit\-remote\-rad\fP
which is invoked by \fBgit\fP on push and fetch to and from Radicle remotes.
.SH "COMMANDS"
.sp
With no arguments, \fBrad patch\fP defaults to the \fIlist\fP command, showing the list of
open patches for the current repository.
.SS "show"
.sp
Shows information on the given patch.
.sp
\fB<patch\-id>\fP
.RS 4
The patch to show
.RE
.sp
\fB\-\-patch\fP, \fB\-p\fP
.RS 4
Show the patch changes in git patch format
.RE
.sp
\fB\-\-verbose\fP, \fB\-v\fP
.RS 4
Show additional information about the patch
.RE
.SS "diff"
.sp
Outputs the patch diff, using Radicle\(cqs diffing tool.
.sp
\fB<patch\-id>\fP
.RS 4
The patch to diff
.RE
.sp
\fB\-\-revision\fP, \fB\-r <revision\-id>\fP
.RS 4
The revision to diff (default: latest)
.RE
.SS "edit"
.sp
Edits a patch revision comment. To edit the patch title or description, pass
in the \fB<patch\-id>\fP. To edit a revision comment, pass that revision\(cqs
\fB<revision\-id>\fP.
.sp
\fB<revision\-id>\fP
.RS 4
The revision to edit.
.RE
.sp
\fB\-\-message\fP, \fB\-m [<string>]\fP
.RS 4
Comment message to the patch or revision. If omitted, Radicle will prompt for
a comment string via \fB$EDITOR\fP.
.RE
.SS "list"
.sp
List patches in the current repository. The default is \fB\-\-open\fP.
.sp
\fB\-\-all\fP
.RS 4
List all patches, including merged and archived patches
.RE
.sp
\fB\-\-archived\fP
.RS 4
List only archived patches
.RE
.sp
\fB\-\-merged\fP
.RS 4
List only merged patches
.RE
.sp
\fB\-\-open\fP
.RS 4
List only open patches
.RE
.sp
\fB\-\-draft\fP
.RS 4
List only draft patches
.RE
.sp
\fB\-\-authored\fP
.RS 4
Show only patches that you have authored
.RE
.sp
\fB\-\-author <did>\fP
.RS 4
Show only patched where the given user is an author
(may be specified multiple times)
.RE
.SS "ready"
.sp
Mark a patch as ready to review. This changes the state of a patch from \fBdraft\fP
to \fBopen\fP.
.sp
\fB\-\-undo\fP
.RS 4
Change a patch back to \fBdraft\fP
.RE
.SS "review"
.sp
Review a patch. Indicate acceptance or rejection of a patch revision along
with a comment.
.sp
\fB\-\-revision\fP, \fB\-r <revision\-id>\fP
.RS 4
The revision to diff (default: latest)
.RE
.sp
\fB\-\-patch\fP, \fB\-\-p\fP
.RS 4
Review by patch hunks
.RE
.sp
\fB\-\-hunk <index>\fP
.RS 4
Only review a specific hunk
.RE
.sp
\fB\-\-accept\fP
.RS 4
Accept a patch or set of hunks
.RE
.sp
\fB\-\-reject\fP
.RS 4
Reject a patch or set of hunks
.RE
.sp
\fB\-\-unified\fP, \fB\-U <n>\fP
.RS 4
Generate diffs with \fB<n>\fP lines of context instead of the usual three
.RE
.sp
\fB\-\-delete\fP, \fB\-d\fP
.RS 4
Delete a review draft
.RE
.sp
\fB\-\-message\fP, \fB\-m [<string>]\fP
.RS 4
Provide a comment with the review (default: prompt)
.RE
.SS "archive"
.sp
Archive a patch.
.sp
\fB\-\-undo\fP
.RS 4
Unarchive a patch
.RE
.SS "set"
.sp
Set the current branch upstream to a patch reference. This configures your
branch such that pushing will update the specified patch.
.sp
\fB<patch\-id>\fP
.RS 4
The patch to set this branch\(cqs upstream to
.RE
.SS "update"
.sp
Updates a patch to the current repository \fBHEAD\fP. This is a low\-level command
that should only be used when using \fBgit push rad\fP is not possible.
.sp
\fB\-\-message\fP, \fB\-m [<string>]\fP
.RS 4
Provide a comment message to the revision
.RE
.sp
\fB\-\-no\-message\fP
.RS 4
Leave the revision comment message blank
.RE
.SS "checkout"
.sp
Switch to a given patch, by creating a branch that points to the patch head.
This is essentially equivalent to \fBgit checkout \-b <name>\fP followed by
\fBrad patch set <patch\-id>\fP. By default, the branch name includes the Patch ID.
.sp
\fB\-\-revision <id>\fP
.RS 4
Checkout the given revision of the patch
.RE
.sp
\fB\-\-name <string>\fP
.RS 4
Provide a name for the new branch
.RE
.sp
\fB\-\-force\fP, \fB\-f\fP
.RS 4
If the checkout already exists, update its head
.RE
.SS "comment"
.sp
Comment on a patch revision, optionally replying to an existing comment.
.sp
\fB<revision\-id>\fP
.RS 4
The patch revision to comment on. The Patch ID is also a Revision ID,
and can be used for commenting on the initial revision of the patch.
Any other Revision ID will comment on the revision specified.
.RE
.sp
\fB\-\-message\fP, \fB\-m <string>\fP
.RS 4
Comment message. If omitted, Radicle will prompt for a comment string via
\fB$EDITOR\fP. Multiple messages will be concatinated with a blank line in between.
.RE
.sp
\fB\-\-reply\-to <comment\-id>\fP
.RS 4
Optional comment to reply to. If ommitted, the comment is a top\-level comment
on the given revision.
.RE
.SH "OPENING A PATCH"
.sp
To open a patch, we start by making changes to our working copy, typically on
a feature branch. For example:
.sp
.if n .RS 4
.nf
.fam C
$ git checkout \-b fix/option\-parsing
  ... edit some files ...
$ git commit \-a \-m "Fix option parsing"
.fam
.fi
.if n .RE
.sp
Once our changes are ready to be proposed as a patch, we push them via \fBgit\fP
to a special reference on the \fBrad\fP remote, that is used for opening patches
(\fBrefs/patches\fP):
.sp
.if n .RS 4
.nf
.fam C
$ git push rad HEAD:refs/patches
✓ Patch 90c77f2c33b7e472e058de4a586156f8a7fec7d6 opened
\&...
.fam
.fi
.if n .RE
.sp
Radicle will then open your editor, where you can edit the patch title and
description. Make sure either \fBEDITOR\fP or \fBVISUAL\fP is set in your environment
(See \fBenviron(7)\fP for more details). Once you\(cqre done, simply save and exit your
editor. If successful, the patch is opened and its identifier is printed out.
You can then display the patch metadata using the \fBshow\fP sub\-command:
.sp
.if n .RS 4
.nf
.fam C
$ rad patch show 90c77f2
.fam
.fi
.if n .RE
.sp
Note that you don\(cqt have to use the full patch identifier. An unambiguous
prefix of it also works.
.sp
Radicle can create a patch from any Git commit. Simply substitute \fBHEAD\fP with
the branch name or commit hash you wish to propose a patch for. For example:
.sp
.if n .RS 4
.nf
.fam C
$ git push rad d39fe32387496876fae6446daf3762aacf69d83b:refs/patches
.fam
.fi
.if n .RE
.sp
After the patch is opened, you may notice that Radicle has set your branch
upstream to something like \fBrad/patches/90c77f2c33b7e472e058de4a586156f8a7fec7d6\fP.
This means your branch is now associated with the newly opened patch, and any
push from this branch will result in the patch being updated. See the next
section on updating a patch for more information.
.SS "Options"
.sp
When opening a patch, various options can be specified using git push options.
This is done via the \fB\-o\fP or \fB\-\-push\-option\fP flag. For example, \fB\-o patch.draft\fP.
The full list of options follows:
.sp
\fBsync\fP, \fBno\-sync\fP
.RS 4
Whether or not to sync with the network after the patch is opened. Defaults
to \fIsync\fP.
.RE
.sp
\fBsync.debug\fP
.RS 4
Show debug information about the syncing process.
.RE
.sp
\fBpatch.draft\fP
.RS 4
Open the patch as a \fIdraft\fP. Turned off by default.
.RE
.sp
\fBpatch.message\fP=\fI<message>\fP
.RS 4
To prevent the editor from opening, you can specify the patch message via this
option. Multiple \fBpatch.message\fP options are concatenated with a blank line
in between.
.RE
.sp
\fBpatch.base\fP=\fI<oid>\fP
.RS 4
The base commit onto which this patch should be merged. By default, this is
your "master" branch. When building stacked patches, it may be useful to
set this to the head of a previous patch.
.RE
.sp
For more information on push options, see \fBgit\-push(1)\fP.
.SH "UPDATING A PATCH"
.sp
To update a patch, we simply make our changes locally and push:
.sp
.if n .RS 4
.nf
.fam C
$ git commit \-\-amend
$ git push \-\-force
✓ Patch 90c77f2 updated to revision d0018fcc21d87c91a1ff9155aed6b4e57535566b
\&...
.fam
.fi
.if n .RE
.sp
Note that this will only work if the current branch upstream is set correctly.
This happens automatically when a patch is opened from a branch without an
upstream set. In the above example, we used the \fB\-\-force\fP option, since the
commit was amended. This is common practice when a patch has been reworked
after receiving a review.
.sp
If the branch upstream is not set to the patch reference, ie. \fBrad/patches/<id>\fP,
you can do so using \f(CRrad patch set <id>\fP.
.sp
As with opening a patch, you will be asked to enter a reason for updating the
patch, via your editor. Simply save and exit when you\(cqre done; or leave it
blank to skip this step.
.sp
It\(cqs also possible to change the patch \fIbase\fP during an update. Simply use the
\fBpatch.base\fP push option as described in \fIOpening a patch\fP.
.SH "CHECKING OUT A PATCH"
.sp
When working with patches opened by peers, it\(cqs often useful to be able to
checkout the code in its own branch. With a patch checkout, you can browse the
code, run tests and even propose your own update to the patch. The \fBcheckout\fP
sub\-command is used to that effect:
.sp
.if n .RS 4
.nf
.fam C
$ rad patch checkout 90c77f2
.fam
.fi
.if n .RE
.sp
Radicle will create a new branch if necessary and checkout the patch head. From
there, you can \fBgit\-push\fP to publish a patch update, or simply browse the code.
.SH "MERGING A PATCH"
.sp
Once a patch is ready to merge, the repository maintainer simply has to use the
\fBgit\-merge(1)\fP command from the "master" branch and push via \fBgit\fP. For
example, if some patch \fB26e3e56\fP is ready to merge, the steps would be:
.sp
.if n .RS 4
.nf
.fam C
$ rad patch checkout 26e3e56
✓ Switched to branch patch/26e3e56
$ git checkout master
$ git merge patch/26e3e56
$ git push rad
✓ Patch 26e3e563ddc7df8dd0c9f81274c0b3cb1b764568 merged
To rad://z42hL2jL4XNk6K8oHQaSWfMgCL7ji/z6MknSLrJoTcukLrE435hVNQT4JUhbvWLX4kUzqkEStBU8Vi
   f2de534..d6399c7  master \-> master
.fam
.fi
.if n .RE
.sp
In the above, we created a checkout for the patch, and merged that branch into
our master branch. Then we pushed to our \fBrad\fP remote.
.SH "LISTING PATCHES"
.sp
To list patches, run \fBrad patch\fP. By default, this will only show open patches.
To list all patches, including ones that have been merged or archived, add the
\fB\-\-all\fP option.
.SH "AUTHOR"
.sp
The Radicle Team